name: Parallel Firebase Distribution for App Flavors

on:
  workflow_dispatch:   # this enables manual trigger
    inputs:
      flavor:
        description: 'Choose which flavor to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - checkcircle
          - favorite
          - star
#  push:
#    branches:
#      - main   # runs on push to main branch
#  pull_request:
#    branches:
#      - main  # PR must target main

jobs:
  # Common setup step (matrix not needed since signing differs per flavor)
  setup:
    runs-on: ubuntu-latest
    outputs:
      flutter-version: 3.24.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.5'
          cache: true


  # ---------------- Checkcircle ----------------
  # build-checkcircle:
  #   needs: setup
  #   if: ${{ github.event.inputs.flavor == 'checkcircle' || github.event.inputs.flavor == 'all' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'
  #         flutter-version: ${{ needs.setup.outputs.flutter-version }}
  #     - run: flutter pub get

  #     # Setup .env file from base64 secrets
  #     - name: Setup .env file
  #       run: |
  #         echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
  #         echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
  #       env:
  #         SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
  #         BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}

  #     # Generate env.g.dart using Envied
  #     - name: Generate env.g.dart with Envied
  #       run: dart run build_runner build --delete-conflicting-outputs

  #     - name: Setup Keystore
  #       run: |
  #         mkdir -p android/keystore
  #         echo "$CHECKCIRCLE_KEYSTORE_BASE64" | base64 --decode > android/keystore/check-circle.jks
  #         cat > android/signing.properties <<EOF
  #         checkcircle.storeFile=../keystore/check-circle.jks
  #         checkcircle.storePassword=${{ secrets.CHECKCIRCLE_KEYSTORE_PASSWORD }}
  #         checkcircle.keyAlias=${{ secrets.CHECKCIRCLE_KEY_ALIAS }}
  #         checkcircle.keyPassword=${{ secrets.CHECKCIRCLE_KEY_PASSWORD }}
  #         EOF
  #       env:
  #         CHECKCIRCLE_KEYSTORE_BASE64: ${{ secrets.CHECKCIRCLE_KEYSTORE_BASE64 }}

  #     - name: Build Checkcircle APK & AAB
  #       run: |
  #         flutter build apk --flavor checkcircle --release -t lib/main_checkcircle.dart
  #         flutter build appbundle --flavor checkcircle --release -t lib/main_checkcircle.dart

  #     - name: Upload Checkcircle Builds
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: checkcircle-builds
  #         path: |
  #           build/app/outputs/flutter-apk/*checkcircle*.apk
  #           build/app/outputs/bundle/checkcircleRelease/*.aab

  #     - name: Upload to Firebase App Distribution (Checkcircle APK)
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #         appId: ${{ secrets.FIREBASE_CHECKCIRCLE_APP_ID }}
  #         serviceCredentialsFileContent: ${{ secrets.FIREBASE_DISTRIBUTION_CHECKCIRCLE_CREDENTIAL_FILE_CONTENT }}
  #         groups: ${{ secrets.FIREBASE_CHECKCIRCLE_QA_GROUP }}
  #         releaseNotes: "GitHub Actions automated build (APK)"
  #         file: build/app/outputs/flutter-apk/app-checkcircle-release.apk

  # # ---------------- Favorite ----------------
  # build-favorite:
  #   needs: setup
  #   if: ${{ github.event.inputs.flavor == 'favorite' || github.event.inputs.flavor == 'all' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'
  #         flutter-version: ${{ needs.setup.outputs.flutter-version }}
  #     - run: flutter pub get

  #     # Setup .env file from base64 secrets
  #     - name: Setup .env file
  #       run: |
  #         echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
  #         echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
  #       env:
  #         SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
  #         BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}

  #     # Generate env.g.dart using Envied
  #     - name: Generate env.g.dart with Envied
  #       run: dart run build_runner build --delete-conflicting-outputs

  #     - name: Setup Keystore
  #       run: |
  #         mkdir -p android/keystore
  #         echo "$FAVORITE_KEYSTORE_BASE64" | base64 --decode > android/keystore/favorite.jks
  #         cat > android/signing.properties <<EOF
  #         favorite.storeFile=../keystore/favorite.jks
  #         favorite.storePassword=${{ secrets.FAVORITE_KEYSTORE_PASSWORD }}
  #         favorite.keyAlias=${{ secrets.FAVORITE_KEY_ALIAS }}
  #         favorite.keyPassword=${{ secrets.FAVORITE_KEY_PASSWORD }}
  #         EOF
  #       env:
  #         FAVORITE_KEYSTORE_BASE64: ${{ secrets.FAVORITE_KEYSTORE_BASE64 }}

  #     - name: Build Favorite APK & AAB
  #       run: |
  #         flutter build apk --flavor favorite --release -t lib/main_favorite.dart
  #         flutter build appbundle --flavor favorite --release -t lib/main_favorite.dart

  #     - name: Upload Favorite Builds
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: favorite-builds
  #         path: |
  #           build/app/outputs/flutter-apk/*favorite*.apk
  #           build/app/outputs/bundle/favoriteRelease/*.aab

  #     - name: Upload to Firebase App Distribution (Favorite APK)
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #         appId: ${{ secrets.FIREBASE_FAVORITE_APP_ID }}
  #         serviceCredentialsFileContent: ${{ secrets.FIREBASE_DISTRIBUTION_FAVORITE_CREDENTIAL_FILE_CONTENT }}
  #         groups: ${{ secrets.FIREBASE_FAVORITE_QA_GROUP }}
  #         releaseNotes: "GitHub Actions automated build (APK)"
  #         file: build/app/outputs/flutter-apk/app-favorite-release.apk

  # # ---------------- Star ----------------
  # build-star:
  #   needs: setup
  #   if: ${{ github.event.inputs.flavor == 'star' || github.event.inputs.flavor == 'all' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'
  #         flutter-version: ${{ needs.setup.outputs.flutter-version }}
  #     - run: flutter pub get

  #     # Setup .env file from base64 secrets
  #     - name: Setup .env file
  #       run: |
  #         echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
  #         echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
  #       env:
  #         SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
  #         BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}

  #     # Generate env.g.dart using Envied
  #     - name: Generate env.g.dart with Envied
  #       run: dart run build_runner build --delete-conflicting-outputs

  #     - name: Setup Keystore
  #       run: |
  #         mkdir -p android/keystore
  #         echo "$STAR_KEYSTORE_BASE64" | base64 --decode > android/keystore/star.jks
  #         cat > android/signing.properties <<EOF
  #         star.storeFile=../keystore/star.jks
  #         star.storePassword=${{ secrets.STAR_KEYSTORE_PASSWORD }}
  #         star.keyAlias=${{ secrets.STAR_KEY_ALIAS }}
  #         star.keyPassword=${{ secrets.STAR_KEY_PASSWORD }}
  #         EOF
  #       env:
  #         STAR_KEYSTORE_BASE64: ${{ secrets.STAR_KEYSTORE_BASE64 }}

  #     - name: Build Star APK & AAB
  #       run: |
  #         flutter build apk --flavor star --release -t lib/main_star.dart
  #         flutter build appbundle --flavor star --release -t lib/main_star.dart

  #     - name: Upload Star Builds
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: star-builds
  #         path: |
  #           build/app/outputs/flutter-apk/*star*.apk
  #           build/app/outputs/bundle/starRelease/*.aab

  #     - name: Upload to Firebase App Distribution (Star APK)
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1
  #       with:
  #         appId: ${{ secrets.FIREBASE_STAR_APP_ID }}
  #         serviceCredentialsFileContent: ${{ secrets.FIREBASE_DISTRIBUTION_STAR_CREDENTIAL_FILE_CONTENT }}
  #         groups: ${{ secrets.FIREBASE_STAR_QA_GROUP }}
  #         releaseNotes: "GitHub Actions automated build (APK)"
  #         file: build/app/outputs/flutter-apk/app-star-release.apk
           
          
  build-star-ios:
    needs: setup
    if: ${{ github.event.inputs.flavor == 'star' || github.event.inputs.flavor == 'all' }}
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        flutter-version: ${{ needs.setup.outputs.flutter-version }}

    - run: flutter pub get

    # Setup Certificates
    - name: Setup iOS Certificates
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_MOBILEPROVISION_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/star.mobileprovision
        echo "$IOS_CERT_BASE64" | base64 --decode > ios_distribution.p12
        security create-keychain -p "" build.keychain
        security import ios_distribution.p12 -k ~/Library/Keychains/build.keychain -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain
      env:
        IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
        IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
        IOS_MOBILEPROVISION_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}

    # Build IPA
    - name: Build iOS IPA (Star)
      run: |
        flutter build ipa --flavor star -t lib/main_star.dart --release

    # Upload IPA to Firebase App Distribution
    - name: Upload to Firebase App Distribution (Star iOS)
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_IOS_STAR_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_DISTRIBUTION_IOS_CREDENTIAL_FILE_CONTENT }}
        groups: ${{ secrets.FIREBASE_IOS_STAR_QA_GROUP }}
        releaseNotes: "GitHub Actions automated build (IPA)"
        file: build/ios/ipa/Runner.ipa